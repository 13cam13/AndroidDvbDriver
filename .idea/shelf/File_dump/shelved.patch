Index: drivers/src/main/java/info/martinmarinov/drivers/DvbDemux.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- drivers/src/main/java/info/martinmarinov/drivers/DvbDemux.java	(revision 1145900e36b20fade3c2f0360f889775fb75bbe4)
+++ drivers/src/main/java/info/martinmarinov/drivers/DvbDemux.java	(revision )
@@ -1,5 +1,10 @@
 package info.martinmarinov.drivers;
 
+import android.content.Context;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
 import java.io.IOException;
 
 import info.martinmarinov.drivers.tools.FastIntFilter;
@@ -23,11 +28,18 @@
     private int droppedUsbFps;
     private long lastUpdated;
 
-    public static DvbDemux DvbDmxSwfilter() {
-        return new DvbDemux(188);
+    private FileOutputStream fos;
+
+    public static DvbDemux DvbDmxSwfilter(Context context) {
+        return new DvbDemux(context, 188);
     }
 
-    private DvbDemux(int pktSize) {
+    private DvbDemux(Context context, int pktSize) {
+        try {
+            fos = new FileOutputStream(new File(context.getExternalFilesDir(null), "dump.ts"), false);
+        } catch (FileNotFoundException e) {
+            throw new RuntimeException(e);
+        }
         this.pktSize = pktSize;
         this.rb = new RingBufferFixedSize(NUM_DATA_RING_BUFFER, pktSize);
         reset();
@@ -120,6 +132,8 @@
         return pos;
     }
 
+    byte[] buffer = new byte[100 * 188];
+    int ptr = 0;
     private void swfilterPacket(byte[] buf, int offset) throws IOException {
         int pid = tsPid(buf, offset);
 
@@ -133,8 +147,15 @@
             }
         }
 
-        if (filter.isFiltered(pid)) rb.write(buf, offset);
+        System.arraycopy(buf, offset, buffer, ptr, 188);
+        ptr += 188;
+
+        if (ptr == buffer.length) {
+            fos.write(buffer);
+            ptr = 0;
-    }
+        }
+        //if (filter.isFiltered(pid)) rb.write(buf, offset);
+    }
 
     private boolean checkSequenceIntegrity(int pid, byte[] buf, int offset) {
         if (pid == 0x1FFF) return true; // This PID is garbage that should be ignored always
@@ -185,5 +206,13 @@
         droppedUsbFps = 0;
         lastUpdated = System.currentTimeMillis();
         setPidFilter(0); // by default we let through only pid 0
+    }
+
+    public void stop() {
+        try {
+            fos.close();
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
     }
 }
Index: drivers/src/main/java/info/martinmarinov/drivers/rtl28xx/Rtl28xxDvbDevice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- drivers/src/main/java/info/martinmarinov/drivers/rtl28xx/Rtl28xxDvbDevice.java	(revision 1145900e36b20fade3c2f0360f889775fb75bbe4)
+++ drivers/src/main/java/info/martinmarinov/drivers/rtl28xx/Rtl28xxDvbDevice.java	(revision )
@@ -39,7 +39,7 @@
     final Rtl28xxI2cAdapter i2CAdapter = new Rtl28xxI2cAdapter();
 
     Rtl28xxDvbDevice(UsbDevice usbDevice, Context context, DeviceFilter deviceFilter) throws DvbException {
-        super(usbDevice, context, deviceFilter, DvbDemux.DvbDmxSwfilter());
+        super(usbDevice, context, deviceFilter, DvbDemux.DvbDmxSwfilter(context));
         iface = usbDevice.getInterface(0);
         endpoint = iface.getEndpoint(0);
 
Index: drivers/src/main/java/info/martinmarinov/drivers/DvbDevice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- drivers/src/main/java/info/martinmarinov/drivers/DvbDevice.java	(revision 1145900e36b20fade3c2f0360f889775fb75bbe4)
+++ drivers/src/main/java/info/martinmarinov/drivers/DvbDevice.java	(revision )
@@ -229,6 +229,7 @@
             } catch (IOException e) {
                 callback.onStreamException(e);
             } finally {
+                dvbDemux.stop();
                 try {
                     usbHiSpeedBulk.stop();
                 } catch (IOException e) {
